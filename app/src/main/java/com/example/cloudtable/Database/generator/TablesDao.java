package com.example.cloudtable.Database.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TABLES".
*/
public class TablesDao extends AbstractDao<Tables, Void> {

    public static final String TABLENAME = "TABLES";

    /**
     * Properties of entity Tables.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Table_id = new Property(0, Integer.class, "table_id", false, "TABLE_ID");
        public final static Property Table_name = new Property(1, String.class, "table_name", false, "TABLE_NAME");
        public final static Property Table_left = new Property(2, Integer.class, "table_left", false, "TABLE_LEFT");
        public final static Property Table_top = new Property(3, Integer.class, "table_top", false, "TABLE_TOP");
        public final static Property Table_right = new Property(4, Integer.class, "table_right", false, "TABLE_RIGHT");
        public final static Property Table_bottom = new Property(5, Integer.class, "table_bottom", false, "TABLE_BOTTOM");
    };


    public TablesDao(DaoConfig config) {
        super(config);
    }
    
    public TablesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLES\" (" + //
                "\"TABLE_ID\" INTEGER UNIQUE ," + // 0: table_id
                "\"TABLE_NAME\" TEXT," + // 1: table_name
                "\"TABLE_LEFT\" INTEGER," + // 2: table_left
                "\"TABLE_TOP\" INTEGER," + // 3: table_top
                "\"TABLE_RIGHT\" INTEGER," + // 4: table_right
                "\"TABLE_BOTTOM\" INTEGER);"); // 5: table_bottom
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Tables entity) {
        stmt.clearBindings();
 
        Integer table_id = entity.getTable_id();
        if (table_id != null) {
            stmt.bindLong(1, table_id);
        }
 
        String table_name = entity.getTable_name();
        if (table_name != null) {
            stmt.bindString(2, table_name);
        }
 
        Integer table_left = entity.getTable_left();
        if (table_left != null) {
            stmt.bindLong(3, table_left);
        }
 
        Integer table_top = entity.getTable_top();
        if (table_top != null) {
            stmt.bindLong(4, table_top);
        }
 
        Integer table_right = entity.getTable_right();
        if (table_right != null) {
            stmt.bindLong(5, table_right);
        }
 
        Integer table_bottom = entity.getTable_bottom();
        if (table_bottom != null) {
            stmt.bindLong(6, table_bottom);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Tables readEntity(Cursor cursor, int offset) {
        Tables entity = new Tables( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // table_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // table_name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // table_left
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // table_top
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // table_right
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // table_bottom
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Tables entity, int offset) {
        entity.setTable_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTable_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTable_left(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTable_top(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTable_right(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setTable_bottom(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Tables entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Tables entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
